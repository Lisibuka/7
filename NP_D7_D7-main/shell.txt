Python manage.py shell

from django.contrib.auth.models import User
from news.models import *
from django.db.models import Sum


Создать двух пользователей (с помощью метода User.objects.create_user('username')).
u1 = User.objects.create_user('User1')
u2 = User.objects.create_user('User2')



Создать два объекта модели Author, связанные с пользователями.
au1 = Author.objects.create(user=u1)
au2 = Author.objects.create(user=u2)



Добавить 4 категории в модель Category.
cat1 = Category.objects.create(news_category='Электричество')
cat2 = Category.objects.create(news_category='Техника')
cat3 = Category.objects.create(news_category='Машины')
cat4 = Category.objects.create(news_category='Спорт')



Добавить 2 статьи и 1 новость.
Шаблон:
a1 = Post.objects.create(author=au1, post_type='AR', title='<Автоматические выключатели>', text='<Тип и свойство>')
a2 = Post.objects.create(author=au2, post_type='AR', title='<Samsung или Haier>', text='<Cравнение>')
n1 = Post.objects.create(author=au1, post_type='NE', title='<Спорт>', text='<Новый сезон в NBA>')



Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
PostCategory.objects.create(post = Post.objects.get(pk=1), category = Category.objects.get(genre='Электричество'))
PostCategory.objects.create(post = Post.objects.get(pk=1), category = Category.objects.get(genre='Техника'))
PostCategory.objects.create(post = Post.objects.get(pk=2), category = Category.objects.get(genre='Техника')) 
PostCategory.objects.create(post = Post.objects.get(pk=2), category = Category.objects.get(genre='Машины'))
PostCategory.objects.create(post = Post.objects.get(pk=3), category = Category.objects.get(genre='Спорт'))
PostCategory.objects.create(post = Post.objects.get(pk=3), category = Category.objects.get(genre='Машины'))



Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
Шаблон:
c1 = Comment.objects.create(post=a1, user=u1, comment_text='<Качественный продукт>')
c2 = Comment.objects.create(post=a2, user=u2, comment_text='<Haier хорошее вложение >')
c3 = Comment.objects.create(post=n1, user=u1, comment_text='<Немецкие машины знак качества>')
c4 = Comment.objects.create(post=n1, user=u2, comment_text='<Лучшая игра с мячом>')





Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
Обновить рейтинги пользователей.
Post.like(a1)
Post.like(a2)
Post.like(n1)
Comment.like(c1)
Comment.like(c2)
c3  -> Comment.like(c3)
c4  -> Comment.like(c4)



Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
best = Author.objects.order_by('-user_rating').values('user')[0]['user']
User.objects.get(id = best)



Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
ar_comm = Post.objects.values('pk').order_by('-post_rating')[0]['pk']
Comment.objects.values('comment_text').filter(post_id = ar_comm)